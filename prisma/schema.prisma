generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

// Notion like application:
// - GreenBoard, manage projects with teams, tasks, organization, and more
// - Meant for a Java Desktop application
// - Will be used to manage the development of GreenBoard

model User {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  active             Boolean   @default(true)
  confirmed          Boolean   @default(false)
  email              String    @unique
  firstName          String
  lastName           String
  passwordHash       String
  role               Role      @relation(fields: [roleId], references: [id])
  roleId             String    @db.Uuid
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  teams              Team[]    @relation("members")
  assignedTasks      Task[]    @relation("assignedUsers")
  createdTasks       Task[]
  createdTeams       Team[]
  tokens             Token[]
  comments           Comment[]
  mentionnedComments Comment[] @relation("mentions")

  @@map("users")
}

model Role {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String  @unique
  description String?
  users       User[]

  @@map("roles")
}

model Project {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  teams       Team[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]

  @@map("projects")
}

model Team {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  projects    Project[]
  members     User[]    @relation("members")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdById String?   @db.Uuid

  @@map("teams")
}

model Task {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  description   String?
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String    @db.Uuid
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?   @db.Uuid
  status        String    @default("TODO")
  priority      String    @default("LOW")
  type          String    @default("TASK")
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedUsers User[]    @relation("assignedUsers")
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String    @db.Uuid
  Comment       Comment[]

  @@map("tasks")
}

model Comment {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.Uuid
  task       Task      @relation(fields: [taskId], references: [id])
  taskId     String    @db.Uuid
  mentions   User[]    @relation("mentions")
  answerTo   Comment?  @relation("comments", fields: [answerToId], references: [id])
  answerToId String?   @db.Uuid
  answers    Comment[] @relation("comments")

  @@map("comments")
}

model Token {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token     String   @unique
  context   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid

  @@map("tokens")
}
